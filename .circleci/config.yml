version: 2.1

# https://circleci.com/docs/2.0/reusing-config/
commands:
  deploy:
    description: "Deploy to GKE"
    parameters:
      helmValueFileName:
        type: string
        default: "values-stg.yaml"
      configMapFileName:
        type: string
        default: "configMap-stg.yaml"
    steps:
      - checkout
      - attach_workspace:
          at: ./my-persist-workspace
      - run:
          name: Retrieve Persisted Environment Variable
          command: |
            cat ./my-persist-workspace/persist-env-var.txt >> $BASH_ENV
            echo $IMAGE_TAG
      - run:
          name: Setup Decrypted Files
          command: |
            mv ./my-persist-workspace/<< parameters.configMapFileName >> ./helm-chart/${HELM_CHART_NAME}/templates/configMap.yaml
            apt-get install -qq -y gettext
            envsubst < ./helm-chart/${HELM_CHART_NAME}/<< parameters.helmValueFileName >> >> ./helm-chart/${HELM_CHART_NAME}/values.yaml
      - run:
          name: Setup Google Cloud SDK
          command: |
            echo $GCLOUD_SERVICE_KEY > ./gcloud-service-key.json
            gcloud auth activate-service-account --key-file=./gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
            rm ./gcloud-service-key.json
      - run:
          name: Setup Helm
          command: |
            curl https://get.helm.sh/helm-v3.0.0-linux-amd64.tar.gz --output helm-v3.0.0-linux-amd64.tar.gz
            tar -zxvf helm-v3.0.0-linux-amd64.tar.gz
            mv linux-amd64/helm /usr/local/bin/helm
            helm repo add stable https://kubernetes-charts.storage.googleapis.com/
      - run:
          name: Install Chart
          command: |
            helm repo update
            cd ./helm-chart/${HELM_CHART_NAME}
            cat values.yaml
            helm upgrade ${HELM_CHART_NAME} . -f values.yaml --install --force --reset-values
            helm ls

jobs:
  build_docker_image:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup Environment Variable
          command: |
            # https://discuss.circleci.com/t/using-environment-variables-in-config-yml-not-working/14237
            # https://circleci.com/docs/2.0/migrating-from-1-2/#search-and-replace-deprecated-20-keys
            TAG=release-$(echo $CIRCLE_SHA1 | cut -c 1-8)-$CIRCLE_BUILD_NUM
            mkdir -p ./my-persist-workspace
            touch ./my-persist-workspace/persist-env-var.txt
            echo "export IMAGE_TAG=$TAG" > ./my-persist-workspace/persist-env-var.txt
            cat ./my-persist-workspace/persist-env-var.txt >> $BASH_ENV
      - run:
          name: Build Docker Image
          command: |
            docker build \
              --build-arg PROJECT_REPONAME=${CIRCLE_PROJECT_REPONAME} \
              --build-arg SHA1=${CIRCLE_SHA1} \
              --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
              --build-arg IMAGE_TAG=${IMAGE_TAG} \
              -t gocreating/cubee-frontend-server:${IMAGE_TAG} \
              -f ./Dockerfile .
      - run:
          name: Push Docker Image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push gocreating/cubee-frontend-server:$IMAGE_TAG
      - persist_to_workspace:
          root: ./my-persist-workspace
          paths:
            - persist-env-var.txt

  decrypt_secrets:
    docker:
      - image: gocreating/ansible-vault
    working_directory: ~/my-working-directory
    environment:
      - HELM_CHART_NAME: "cubee-frontend-server"
    steps:
      - checkout
      # https://support.circleci.com/hc/en-us/articles/360016505753-Resolve-Certificate-Signed-By-Unknown-Authority-error-in-Alpine-images
      - run: apk add ca-certificates
      - run:
          name: Decrypt Secret Files
          command: |
            mkdir -p ./my-persist-workspace
            echo $ANSIBLE_VAULT_PASSWORD > /root/ansible_vault.key
            ansible-vault decrypt \
              ./helm-chart/${HELM_CHART_NAME}/configMap-prod.yaml \
              --output ./my-persist-workspace/configMap-prod.yaml \
              --vault-password-file=/root/ansible_vault.key
            ansible-vault decrypt \
              ./helm-chart/${HELM_CHART_NAME}/configMap-stg.yaml \
              --output ./my-persist-workspace/configMap-stg.yaml \
              --vault-password-file=/root/ansible_vault.key
            rm /root/ansible_vault.key
      - persist_to_workspace:
          root: ./my-persist-workspace
          paths:
            - configMap-prod.yaml
            - configMap-stg.yaml

  deploy_to_staging:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/my-working-directory
    environment:
      - PROJECT_NAME: "cubee-frontend-server"
      - HELM_CHART_NAME: "cubee-frontend-server"
      - GOOGLE_PROJECT_ID: "cubee-247317"
      - GOOGLE_COMPUTE_ZONE: "asia-east1-a"
      - GOOGLE_CLUSTER_NAME: "cubee-stg"
    steps:
      - deploy:
          helmValueFileName: "values-stg.yaml"
          configMapFileName: "configMap-stg.yaml"

  deploy_to_production:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/my-working-directory
    environment:
      - PROJECT_NAME: "cubee-frontend-server"
      - HELM_CHART_NAME: "cubee-frontend-server"
      - GOOGLE_PROJECT_ID: "cubee-247317"
      - GOOGLE_COMPUTE_ZONE: "asia-east1-a"
      - GOOGLE_CLUSTER_NAME: "cubee-prod"
    steps:
      - deploy:
          helmValueFileName: "values-prod.yaml"
          configMapFileName: "configMap-prod.yaml"

workflows:
  version: 2
  build_image_and_deploy:
    jobs:
      - build_docker_image:
          filters:
            branches:
              only: master
            tags:
              only: /release-.*/
      - decrypt_secrets:
          filters:
            branches:
              only: master
            tags:
              only: /release-.*/
      - deploy_to_staging:
          requires:
            - build_docker_image
            - decrypt_secrets
          filters:
            branches:
              only: master
            tags:
              only: /release-.*/
      - deploy_to_production:
          requires:
            - build_docker_image
            - decrypt_secrets
            - deploy_to_staging
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /release-.*/
